install_base()
{
	mkdir $settings_path/root
	cd $settings_path

	truncate -s ${settings_disksize}G disk.img
	mkfs.ext4 disk.img

	wget -O archlinuxarm.tar.gz http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz

	currentdir=${PWD##*/}
	losetup -f $settings_path/disk.img
	mountpoint=$(losetup -a | grep $currentdir | awk '{print $1}' | tr -d :)
	mount -t ext4 $mountpoint $settings_path/root

	cd $settings_path/root

	decoration_message ~ "Extracting the rootfs, please wait..."
	tar -xf $settings_path/archlinuxarm.tar.gz
	rm $settings_path/archlinuxarm.tar.gz
	cd $settings_path
}

install_profile()
{
	rm $settings_path/root/etc/resolv.conf
	echo "nameserver 8.8.8.8" > $settings_path/root/etc/resolv.conf
	echo "export HOME=/root" >> $settings_path/root/etc/profile
	echo "unset LD_PRELOAD" >> $settings_path/root/etc/profile
	echo "cd ~" >> $settings_path/root/etc/profile
}

install_mount()
{
	mount -o bind /dev $settings_path/root/dev
	mount -t proc proc $settings_path/root/proc
	mount -t sysfs sysfs $settings_path/root/sys
	mount -t tmpfs tmpfs $settings_path/root/tmp
	mount -t devpts devpts $settings_path/root/dev/pts
}

install_mount_internal()
{
	mkdir $settings_path/root/sdcard
	mount -o bind /sdcard $settings_path/root/sdcard
}

install_scripts()
{
	echo "#!/bin/bash" > $settings_path/mount_anarch
	echo "currentdir=\${PWD##*/}" >> $settings_path/mount_anarch
	echo "losetup -f disk.img" >> $settings_path/mount_anarch
	echo "mountpoint=\$(losetup -a | grep \$currentdir | awk '{print \$1}' | tr -d :)" >> $settings_path/mount_anarch
	echo "mount -t ext4 \$mountpoint root" >> $settings_path/mount_anarch
	echo "mount -o bind /dev root/dev" >> $settings_path/mount_anarch
	echo "mount -t proc  proc root/proc" >> $settings_path/mount_anarch
	echo "mount -t sysfs sysfs root/sys" >> $settings_path/mount_anarch
	echo "mount -t tmpfs tmpfs root/tmp" >> $settings_path/mount_anarch
	echo "mount -t devpts devpts root/dev/pts" >> $settings_path/mount_anarch
    if [ $settings_mountstorage = "yes" ]
	then
		echo "mount -o bind /sdcard root/sdcard" >> $settings_path/mount_anarch
	fi
	
	echo "#!/bin/bash" > $settings_path/unmount_anarch
	if [ $settings_mountstorage = "yes" ]
	then
		echo "umount -l root/sdcard" >> $settings_path/unmount_anarch
	fi	
	echo "umount -l root/dev/pts" >> $settings_path/unmount_anarch
	echo "umount -l root/tmp" >> $settings_path/unmount_anarch
	echo "umount -l root/sys" >> $settings_path/unmount_anarch
	echo "umount -l root/proc" >> $settings_path/unmount_anarch
	echo "umount -l root/dev" >> $settings_path/unmount_anarch
	echo "umount -l root" >> $settings_path/unmount_anarch
	echo "losetup -D" >> $settings_path/unmount_anarch

	echo "#!/bin/bash" > $settings_path/start_anarch
	echo "chroot root /bin/bash -l" >> $settings_path/start_anarch
}

install_misc()
{
	sed -i 's/#IgnorePkg   =/IgnorePkg   = linux-aarch64 linux-firmware/' $settings_path/root/etc/pacman.conf

	echo "#!/bin/bash" > $settings_path/root/tmp/delete_stuff
	echo "pacman -Rs linux-aarch64 linux-firmware --noconfirm" >> $settings_path/root/tmp/delete_stuff
	echo "exit" >> $settings_path/root/tmp/delete_stuff
	chroot $settings_path/root bash /tmp/delete_stuff

	echo "#!/bin/bash" > $settings_path/root/tmp/keyring_setup
	echo "pacman-key --init" >> $settings_path/root/tmp/keyring_setup
	echo "pacman-key --populate" >> $settings_path/root/tmp/keyring_setup
	echo "pacman -Sy archlinux-keyring archlinuxarm-keyring --noconfirm" >> $settings_path/root/tmp/keyring_setup
	echo "pacman -Su --noconfirm" >> $settings_path/root/tmp/keyring_setup
	echo "exit" >> $settings_path/root/tmp/keyring_setup
	chroot $settings_path/root bash /tmp/keyring_setup

	echo "#!/bin/bash" > $settings_path/root/tmp/misc_setup
	echo "pacman -S nano base-devel wget git tigervnc --noconfirm" >> $settings_path/root/tmp/misc_setup
	echo "exit" >> $settings_path/root/tmp/misc_setup
	chroot $settings_path/root bash /tmp/misc_setup

	echo "#!/bin/bash" > $settings_path/root/tmp/servicectl_setup
	echo "cd /tmp" >> $settings_path/root/tmp/servicectl_setup
	echo "wget -O a.tar.gz https://github.com/selirra/servicectl/archive/1.0.tar.gz" >> $settings_path/root/tmp/servicectl_setup
	echo "tar -xf a.tar.gz -C /usr/local/lib/" >> $settings_path/root/tmp/servicectl_setup
	echo "ln -s /usr/local/lib/servicectl-1.0/servicectl /usr/local/bin/servicectl" >> $settings_path/root/tmp/servicectl_setup
	echo "ln -s /usr/local/lib/servicectl-1.0/serviced /usr/local/bin/serviced" >> $settings_path/root/tmp/servicectl_setup
	echo "rm a.tar.gz" >> $settings_path/root/tmp/servicectl_setup
	echo "exit" >> $settings_path/root/tmp/servicectl_setup
	chroot $settings_path/root bash /tmp/servicectl_setup
}

install_finished()
{
	decoration_line =
	decoration_text_centered "Installation completed!"
	echo
	decoration_text_centered "From now on, you can enter your chroot by running"
	decoration_text_centered "the mount, and start scripts in your anarch folder!"
	echo
	decoration_text_centered "Installer script created by: Selirra"
	decoration_text_centered "https://github.com/selirra"
	echo
	decoration_text_centered "Servicectl utility created by: Smaknsk"
	decoration_text_centered "https://github.com/smaknsk/servicectl"
	decoration_line =
	chroot $settings_path/root /bin/bash -l
}